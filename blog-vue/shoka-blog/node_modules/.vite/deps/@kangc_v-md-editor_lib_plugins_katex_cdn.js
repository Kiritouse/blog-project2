import {
  require_interopRequireDefault
} from "./chunk-CDEEXQU3.js";
import {
  __commonJS
} from "./chunk-HUBM7RA2.js";

// node_modules/@kangc/v-md-editor/lib/plugins/katex/creator.js
var require_creator = __commonJS({
  "node_modules/@kangc/v-md-editor/lib/plugins/katex/creator.js"(exports) {
    "use strict";
    exports.__esModule = true;
    exports.default = _default;
    function _default(parser) {
      return function createKatexPlugin(katexOptions) {
        return {
          install: function install(VMdEditor) {
            VMdEditor.vMdParser.use(parser, katexOptions);
          }
        };
      };
    }
  }
});

// node_modules/@babel/runtime/helpers/extends.js
var require_extends = __commonJS({
  "node_modules/@babel/runtime/helpers/extends.js"(exports, module) {
    function _extends() {
      module.exports = _extends = Object.assign ? Object.assign.bind() : function(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      }, module.exports.__esModule = true, module.exports["default"] = module.exports;
      return _extends.apply(this, arguments);
    }
    module.exports = _extends, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/@kangc/v-md-editor/lib/utils/markdown-it-katex.js
var require_markdown_it_katex = __commonJS({
  "node_modules/@kangc/v-md-editor/lib/utils/markdown-it-katex.js"(exports) {
    "use strict";
    exports.__esModule = true;
    exports.default = math_plugin;
    function isValidDelim(state, pos) {
      var prevChar;
      var nextChar;
      var max = state.posMax;
      var can_open = true;
      var can_close = true;
      prevChar = pos > 0 ? state.src.charCodeAt(pos - 1) : -1;
      nextChar = pos + 1 <= max ? state.src.charCodeAt(pos + 1) : -1;
      if (prevChar === 32 || prevChar === 9 || nextChar >= 48 && nextChar <= 57) {
        can_close = false;
      }
      if (nextChar === 32 || nextChar === 9) {
        can_open = false;
      }
      return {
        can_open,
        can_close
      };
    }
    function math_inline(state, silent) {
      var start;
      var match;
      var token;
      var res;
      var pos;
      var esc_count;
      if (state.src[state.pos] !== "$") {
        return false;
      }
      res = isValidDelim(state, state.pos);
      if (!res.can_open) {
        if (!silent) {
          state.pending += "$";
        }
        state.pos += 1;
        return true;
      }
      start = state.pos + 1;
      match = start;
      while ((match = state.src.indexOf("$", match)) !== -1) {
        pos = match - 1;
        while (state.src[pos] === "\\") {
          pos -= 1;
        }
        if ((match - pos) % 2 == 1) {
          break;
        }
        match += 1;
      }
      if (match === -1) {
        if (!silent) {
          state.pending += "$";
        }
        state.pos = start;
        return true;
      }
      if (match - start === 0) {
        if (!silent) {
          state.pending += "$$";
        }
        state.pos = start + 1;
        return true;
      }
      res = isValidDelim(state, match);
      if (!res.can_close) {
        if (!silent) {
          state.pending += "$";
        }
        state.pos = start;
        return true;
      }
      if (!silent) {
        token = state.push("math_inline", "math", 0);
        token.markup = "$";
        token.content = state.src.slice(start, match);
      }
      state.pos = match + 1;
      return true;
    }
    function math_block(state, start, end, silent) {
      var firstLine;
      var lastLine;
      var next;
      var lastPos;
      var found = false;
      var token;
      var pos = state.bMarks[start] + state.tShift[start];
      var max = state.eMarks[start];
      if (pos + 2 > max) {
        return false;
      }
      if (state.src.slice(pos, pos + 2) !== "$$") {
        return false;
      }
      pos += 2;
      firstLine = state.src.slice(pos, max);
      if (silent) {
        return true;
      }
      if (firstLine.trim().slice(-2) === "$$") {
        firstLine = firstLine.trim().slice(0, -2);
        found = true;
      }
      for (next = start; !found; ) {
        next++;
        if (next >= end) {
          break;
        }
        pos = state.bMarks[next] + state.tShift[next];
        max = state.eMarks[next];
        if (pos < max && state.tShift[next] < state.blkIndent) {
          break;
        }
        if (state.src.slice(pos, max).trim().slice(-2) === "$$") {
          lastPos = state.src.slice(0, max).lastIndexOf("$$");
          lastLine = state.src.slice(pos, lastPos);
          found = true;
        }
      }
      state.line = next + 1;
      token = state.push("math_block", "math", 0);
      token.block = true;
      token.content = (firstLine && firstLine.trim() ? firstLine + "\n" : "") + state.getLines(start + 1, next, state.tShift[start], true) + (lastLine && lastLine.trim() ? lastLine : "");
      token.map = [start, state.line];
      token.markup = "$$";
      return true;
    }
    function math_plugin(md, options) {
      options = options || {};
      var _options = options, katex = _options.katex;
      var katexInline = function katexInline2(latex) {
        options.displayMode = false;
        try {
          return katex.renderToString(latex, options);
        } catch (error) {
          if (options.throwOnError) {
            console.log(error);
          }
          return latex;
        }
      };
      var inlineRenderer = function inlineRenderer2(tokens, idx) {
        return katexInline(tokens[idx].content);
      };
      var katexBlock = function katexBlock2(latex) {
        options.displayMode = true;
        try {
          return "<p>" + katex.renderToString(latex, options) + "</p>";
        } catch (error) {
          if (options.throwOnError) {
            console.log(error);
          }
          return latex;
        }
      };
      var blockRenderer = function blockRenderer2(tokens, idx) {
        return katexBlock(tokens[idx].content) + "\n";
      };
      md.inline.ruler.after("escape", "math_inline", math_inline);
      md.block.ruler.after("blockquote", "math_block", math_block, {
        alt: ["paragraph", "reference", "blockquote", "list"]
      });
      md.renderer.rules.math_inline = inlineRenderer;
      md.renderer.rules.math_block = blockRenderer;
    }
  }
});

// node_modules/@kangc/v-md-editor/lib/plugins/katex/parser-creator.js
var require_parser_creator = __commonJS({
  "node_modules/@kangc/v-md-editor/lib/plugins/katex/parser-creator.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    exports.__esModule = true;
    exports.default = parserCreator;
    var _extends2 = _interopRequireDefault(require_extends());
    var _markdownItKatex = _interopRequireDefault(require_markdown_it_katex());
    function parserCreator(katex) {
      return function parser(vMdParser, katexOptions) {
        vMdParser.extendMarkdown(function(mdParser) {
          if (katex) {
            mdParser.use(_markdownItKatex.default, (0, _extends2.default)({}, katexOptions, {
              katex
            }));
          }
        });
      };
    }
  }
});

// node_modules/@kangc/v-md-editor/lib/plugins/katex/parser-cdn.js
var require_parser_cdn = __commonJS({
  "node_modules/@kangc/v-md-editor/lib/plugins/katex/parser-cdn.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    exports.__esModule = true;
    exports.default = void 0;
    var _parserCreator = _interopRequireDefault(require_parser_creator());
    var isServer = typeof window === "undefined";
    if (!isServer && !window.katex) {
      console.error("Please import resources katex from cdn");
    }
    var _default = (0, _parserCreator.default)(!isServer ? window.katex : null);
    exports.default = _default;
  }
});

// node_modules/@kangc/v-md-editor/lib/plugins/katex/cdn.js
var require_cdn = __commonJS({
  "node_modules/@kangc/v-md-editor/lib/plugins/katex/cdn.js"(exports) {
    var _interopRequireDefault = require_interopRequireDefault();
    exports.__esModule = true;
    exports.default = void 0;
    var _creator = _interopRequireDefault(require_creator());
    var _parserCdn = _interopRequireDefault(require_parser_cdn());
    var _default = (0, _creator.default)(_parserCdn.default);
    exports.default = _default;
  }
});
export default require_cdn();
//# sourceMappingURL=@kangc_v-md-editor_lib_plugins_katex_cdn.js.map
